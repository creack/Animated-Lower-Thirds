import React, { useEffect, useState } from "react";
import styled, { keyframes, Keyframes } from "styled-components";
import { cubicBezier, translate3d } from "./lib/react-animations/utils";
import { Animation } from "./lib/react-animations/types";

const animationRightSlash: Animation = {
  "0%": {
    opacity: 0,
    transform: translate3d("-6em", 0, 0),
  },
  "25%": {
    opacity: 0,
    transform: translate3d("-6em", 0, 0),
  },
  "50%": {
    opacity: 1,
  },
  "75%": {
    transform: translate3d(0, 0, 0),
  },
  "100%": {
    transform: translate3d(0, 0, 0),
  },
};

const animationRightSlashKeyframes = keyframes`${animationRightSlash}`;

const Graph01 = styled.span<{
  keyframes: Keyframes;
  duration: string;
  direction: "normal" | "reverse";
  hidden?: boolean;
}>`
  animation: ${(props) => props.keyframes};
  animation-timing-function: ${cubicBezier(0.19, 0.76, 0.32, 1)};
  animation-duration: ${(props) => props.duration};
  animation-iteration-count: 1;
  animation-direction: ${(props) => props.direction};
  animation-fill-mode: both;
  {props => props.hidden ? 'display : none;' : ''}
  order: 1;
  min-width: 0.3em;
  height: 3.5em;
  background: #47d;
  box-shadow: 0.1rem 0.1rem 0.2rem rgba(0, 0, 0, 0.5);
  border: 2px solid red;
  position: absolute;
  top: 10;
`;

type animStep = "pre-load" | "ease-in" | "active" | "ease-out" | "unloaded";
type animClass = "" | "hide-anim" | "animation-in" | "animation-out";

const GrRoot = styled.div({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  position: "absolute",
  transition: "left 0.1s, bottom 0.1s, right 0.1s",

  fontSize: "28px",
  bottom: "6rem",
  right: "4rem",
  flexDirection: "row-reverse",
});

const Card: React.FC = () => {
  const [[curAnimClass, curAnimStep], setState] = useState<
    [animClass, animStep]
  >(["hide-anim", "pre-load"]);

  const nextAnimStep = (
    curStep: animStep,
  ): { nextStep: animStep; className: animClass; delay: number } => {
    switch (curStep) {
      case "pre-load":
        return { nextStep: "ease-in", className: "animation-in", delay: 0 };
      case "ease-in":
        return {
          nextStep: "active",
          className: "",
          delay: 4000,
        };
      case "active":
        return {
          nextStep: "ease-out",
          className: "animation-out",
          delay: 500,
        };
      case "ease-out":
        return {
          nextStep: "unloaded",
          className: "hide-anim",
          delay: 4000,
        };
      case "unloaded":
        return { nextStep: "pre-load", className: "", delay: 1000 };
      default:
        throw new Error("unreachable");
    }
  };

  useEffect(() => {
    const { nextStep, className, delay } = nextAnimStep(curAnimStep);

    if (delay < 0) {
      return;
    }
    setTimeout(() => {
      setState([className || curAnimClass, nextStep]);
    }, delay);
  }, [curAnimStep]);

  const G0 = (direction: "normal" | "reverse", hidden?: boolean) => (
    <Graph01
      keyframes={animationRightSlashKeyframes}
      duration="4s"
      direction={direction}
      hidden={hidden}
    />
  );

  const gr: Record<animClass, ReturnType<typeof G0>> = {
    "": G0("normal", false),
    "hide-anim": G0("normal", true),
    "animation-in": G0("normal", false),
    "animation-out": G0("reverse", false),
  };

  return <GrRoot key={curAnimClass}>{gr[curAnimClass]}</GrRoot>;
};

export default Card;
